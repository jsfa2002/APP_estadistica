# -*- coding: utf-8 -*-
"""app3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ypVmeuLg4oZ8maZp-MtDLDaJmcBfGHv
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

# Configuración de la página
st.set_page_config(page_title="ReDim - Análisis de Regresión", layout="wide")
st.title('📊 ReDim: Análisis de Regresión y Predicción')

# Sidebar para subir el archivo
st.sidebar.header("Opciones")
uploaded_file = st.sidebar.file_uploader("Sube tu archivo CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.sidebar.success("Archivo cargado exitosamente!")

    st.subheader("📌 Vista previa de los datos")
    st.dataframe(df.head())

    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
    cat_cols = df.select_dtypes(include=['object']).columns

    st.sidebar.subheader("Modelos de Regresión y Predicción")
    model_choice = st.sidebar.selectbox("Selecciona el modelo", ["Regresión Lineal", "Regresión Logística", "LDA", "QDA"])

    target_var = st.sidebar.selectbox("Selecciona la variable dependiente (Y)", df.columns)
    predictor_vars = st.sidebar.multiselect("Selecciona las variables predictoras (X)", df.columns.drop(target_var))

    if st.sidebar.button("Ejecutar Modelo"):
        st.subheader(f"📈 Modelo seleccionado: {model_choice}")

        X = df[predictor_vars]
        y = df[target_var]

        # Partición del 70% entrenamiento y 30% prueba
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        if model_choice == "Regresión Lineal":
            model = LinearRegression()
        elif model_choice == "Regresión Logística":
            model = LogisticRegression()
        elif model_choice == "LDA":
            model = LinearDiscriminantAnalysis()
        else:
            model = QuadraticDiscriminantAnalysis()

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        st.write("### Resultados estimados")
        st.write(y_pred)

        if model_choice != "Regresión Lineal":
            st.write("### Matriz de Confusión")
            cm = confusion_matrix(y_test, y_pred)
            st.write(cm)

            st.write("### Reporte de Clasificación")
            st.write(classification_report(y_test, y_pred))

        st.success(f"{model_choice} ejecutado correctamente")

    # Comparación de modelos
    if st.sidebar.button("Comparar Modelos"):
        st.subheader("📊 Comparación de Modelos")
        models = {
            "Regresión Logística": LogisticRegression(),
            "LDA": LinearDiscriminantAnalysis(),
            "QDA": QuadraticDiscriminantAnalysis()
        }
        results = {}
        for name, mdl in models.items():
            mdl.fit(X_train, y_train)
            pred = mdl.predict(X_test)
            acc = accuracy_score(y_test, pred)
            results[name] = acc

        results_df = pd.DataFrame(results.items(), columns=["Modelo", "Exactitud"])
        st.write(results_df)

        best_model = results_df.loc[results_df['Exactitud'].idxmax()]
        st.success(f"El mejor modelo es {best_model['Modelo']} con una exactitud de {best_model['Exactitud']:.2f}")

st.sidebar.markdown("---")
st.sidebar.markdown("🚀 Desarrollado con cariño por ReDim Team")