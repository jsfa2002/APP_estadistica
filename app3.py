# -*- coding: utf-8 -*-
"""app3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ypVmeuLg4oZ8maZp-MtDLDaJmcBfGHv
"""
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from prince import MCA

# Configuración de la página
st.set_page_config(page_title="ReDim - Análisis de Datos", layout="wide")
st.title('📊 ReDim: Exploración de Datos con PCA, MCA y Modelos de Predicción')

# Sidebar para subir el archivo
st.sidebar.header("Opciones")
uploaded_file = st.sidebar.file_uploader("Sube tu archivo CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.sidebar.success("Archivo cargado exitosamente!")
    st.subheader("📌 Vista previa de los datos")
    st.dataframe(df.head())
    
    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
    cat_cols = df.select_dtypes(include=['object']).columns

    # Análisis Exploratorio de Datos (EDA)
    if st.sidebar.button("Ejecutar EDA"):
        st.subheader("📊 Análisis Exploratorio de Datos (EDA)")
        st.write("### Estadísticas descriptivas")
        st.write(df.describe())
        st.write("### Valores nulos por columna")
        st.bar_chart(df.isnull().sum())

    # PCA
    if st.sidebar.button("Ejecutar PCA"):
        st.subheader("🔎 Análisis de Componentes Principales (PCA)")
        if len(numeric_cols) > 1:
            imputer = SimpleImputer(strategy='mean')
            df_filled = pd.DataFrame(imputer.fit_transform(df[numeric_cols]), columns=numeric_cols)
            scaler = StandardScaler()
            df_scaled = scaler.fit_transform(df_filled)
            pca = PCA()
            pca.fit(df_scaled)
            st.bar_chart(pca.explained_variance_ratio_)
        else:
            st.error("Se necesitan al menos 2 variables numéricas para ejecutar PCA")
    
    # MCA
    if st.sidebar.button("Ejecutar MCA"):
        st.subheader("🎭 Análisis de Correspondencias Múltiples (MCA)")
        if len(cat_cols) > 1:
            df_cat = df[cat_cols].astype(str)
            mca = MCA()
            mca.fit(df_cat)
            st.bar_chart(mca.eigenvalues_)
        else:
            st.warning("Se necesitan al menos dos columnas categóricas para ejecutar MCA.")

    # Modelos de Regresión y Predicción
    st.sidebar.subheader("Modelos de Predicción")
    model_option = st.sidebar.selectbox("Selecciona un modelo", ["Regresión Lineal", "Regresión Logística", "LDA", "QDA"])
    target_col = st.sidebar.selectbox("Selecciona la variable objetivo", df.columns)
    feature_cols = st.sidebar.multiselect("Selecciona las variables regresoras", df.columns.drop(target_col))
    
    if st.sidebar.button("Ejecutar Modelo"):
        X = df[feature_cols]
        y = df[target_col]
        
        # División de datos
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
        st.write(f"Datos de entrenamiento: {X_train.shape[0]} filas")
        st.write(f"Datos de prueba: {X_test.shape[0]} filas")
        
        # Selección del modelo
        if model_option == "Regresión Lineal":
            model = LinearRegression()
        elif model_option == "Regresión Logística":
            model = LogisticRegression()
        elif model_option == "LDA":
            model = LinearDiscriminantAnalysis()
        else:
            model = QuadraticDiscriminantAnalysis()
        
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        
        # Evaluación del modelo
        accuracy = accuracy_score(y_test, y_pred.round())
        precision = precision_score(y_test, y_pred.round(), average='weighted', zero_division=0)
        recall = recall_score(y_test, y_pred.round(), average='weighted', zero_division=0)
        f1 = f1_score(y_test, y_pred.round(), average='weighted', zero_division=0)
        
        # Matriz de confusión
        cm = confusion_matrix(y_test, y_pred.round())
        st.write("### Matriz de Confusión")
        st.write(cm)
        
        # Métricas en tabla
        results_df = pd.DataFrame({
            "Modelo": [model_option],
            "Accuracy": [accuracy],
            "Precision": [precision],
            "Recall": [recall],
            "F1-Score": [f1]
        })
        st.write("### Métricas del Modelo")
        st.dataframe(results_df)
    
    # Comparación de Modelos
    if st.sidebar.button("Comparación de Modelos"):
        st.subheader("📊 Comparación de Modelos")
        st.write("Se compararán las métricas de los modelos ejecutados previamente.")
        # Aquí se pueden agregar más modelos y comparar sus métricas

st.sidebar.markdown("---")
st.sidebar.markdown("🚀 Desarrollado con cariño por ReDim Team")

